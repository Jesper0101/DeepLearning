# Image Classification with ResNet50 (ImageNet)

[![Python](https://img.shields.io/badge/Python-3.8%2B-blue.svg)](https://www.python.org/)
[![TensorFlow](https://img.shields.io/badge/TensorFlow-2.x-orange.svg)](https://www.tensorflow.org/)
[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)

This project demonstrates how to use the **ResNet50 pretrained model** from Keras to classify images into one of **1000 ImageNet classes**.

---

## Features

- Load and use a pretrained ResNet50 model with weights trained on ImageNet
- Predict image classes with a simple Python script
- Works on any image file (just change the path)
- View human-readable predictions using `decode_predictions`

---

## Installation

```bash
pip install tensorflow pillow numpy

# Usage Example
from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load pretrained model
model = ResNet50(weights='imagenet')

# Load and preprocess image
img_path = 'tennisboll.jpg'  # Change this to your image
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

# Predict
preds = model.predict(x)
print('Predicted:', decode_predictions(preds, top=3)[0])


Pretrained models are powerful because they capture general features and representations from large-scale datasets like ImageNet.

Benefits include:

Skip training from scratch

Get accurate results with minimal effort

Fine-tune for your custom tasks with smaller datasets
